/**
 * Service pour g√©rer les appels API Equos (Avatar IA)
 * Equos (equos.ai) fournit des avatars visuels avec voix IA
 *
 * S√âCURIT√â: Les appels √† l'API Equos sont faits via Edge Functions Supabase
 * pour prot√©ger la cl√© secr√®te. La cl√© n'est JAMAIS expos√©e c√¥t√© client.
 *
 * Documentation: https://api.equos.ai/docs
 */

import { supabase } from '@/integrations/supabase/client';

/**
 * Provider options pour Equos
 */
export type EquosProvider = 'openai' | 'gemini' | 'elevenlabs';

/**
 * Configuration OpenAI pour Equos
 */
export interface OpenaiAgentConfig {
  instructions: string; // System prompt (max 10000 chars)
  model: 'gpt-4o-realtime-preview' | 'gpt-realtime';
  voice: 'alloy' | 'marin' | 'cedar' | 'ash' | 'ballad' | 'coral' | 'echo' | 'sage' | 'shimmer' | 'verse';
}

/**
 * Agent Equos
 */
export interface EquosAgent {
  id: string;
  organizationId: string;
  name?: string;
  provider: EquosProvider;
  client?: string;
  config: OpenaiAgentConfig;
  createdAt: string;
  updatedAt: string;
}

/**
 * Session Equos (pour l'avatar)
 * Bas√© sur LiveKit pour WebRTC
 */
export interface EquosSession {
  id: string;
  organizationId: string;
  name: string;
  status: string;
  host: {
    serverUrl: string; // URL du serveur LiveKit
  };
  avatarId: string;
  avatar: {
    id: string;
    name: string;
    thumbnailUrl?: string;
  };
  agentId?: string;
  agent?: EquosAgent;
  startedAt: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * R√©ponse de cr√©ation de session
 */
export interface CreateSessionResponse {
  session: EquosSession;
  consumerAccessToken: string; // Token pour se connecter √† LiveKit
  remoteAgentAccessToken?: string;
}

/**
 * Cr√©er un agent Equos avec OpenAI GPT-4o Realtime
 *
 * S√âCURIT√â: Appelle une Edge Function Supabase qui prot√®ge la cl√© secr√®te
 *
 * @param instructions - System prompt personnalis√© (instructions pour l'IA)
 * @param studentName - Nom de l'√©tudiant (pour identifier l'agent)
 * @returns Agent Equos cr√©√©
 */
export async function createEquosAgent(
  instructions: string,
  studentName: string
): Promise<EquosAgent> {
  console.log('üé≠ [EQUOS] Cr√©ation agent pour:', studentName);
  console.log('üìè [EQUOS] Longueur instructions:', instructions.length, 'caract√®res');

  // Appeler l'Edge Function Supabase (s√©curis√©e)
  const { data, error } = await supabase.functions.invoke('create-equos-agent', {
    body: {
      instructions,
      studentName
    }
  });

  if (error) {
    console.error('‚ùå [EQUOS] Erreur Edge Function:', error);
    console.error('‚ùå [EQUOS] D√©tails:', JSON.stringify(error, null, 2));
    throw new Error(`Erreur Edge Function: ${error.message}`);
  }

  if (!data) {
    throw new Error('Aucune donn√©e retourn√©e par l\'Edge Function');
  }

  // Si data contient une erreur (Edge Function a retourn√© 200 avec erreur)
  if (data.error) {
    console.error('‚ùå [EQUOS] Erreur API:', data.error);
    console.error('‚ùå [EQUOS] D√©tails:', data.details || data.message);
    throw new Error(`Erreur Equos API: ${data.error} - ${data.details?.message || data.message || 'Erreur inconnue'}`);
  }

  console.log('‚úÖ [EQUOS] Agent cr√©√©:', data.id);
  console.log('üìã [EQUOS] Organization:', data.organizationId);

  return data as EquosAgent;
}

/**
 * Cr√©er une session Equos (d√©marre l'avatar + conversation)
 *
 * S√âCURIT√â: Appelle une Edge Function Supabase qui prot√®ge la cl√© secr√®te
 *
 * @param agentId - ID de l'agent Equos (ou cr√©ation √† la vol√©e)
 * @param avatarId - ID de l'avatar visuel (ou cr√©ation √† la vol√©e)
 * @param studentName - Nom de l'√©tudiant (pour la session)
 * @param consumerIdentity - Identit√© du consommateur (utilisateur final)
 * @param maxDuration - Dur√©e maximale de la session en secondes (optionnel, pour limiter les users gratuits)
 * @returns R√©ponse avec session + consumerAccessToken pour LiveKit
 */
export async function createEquosSession(
  agentId: string,
  avatarId: string,
  studentName: string,
  consumerIdentity?: { identity: string; name: string },
  maxDuration?: number
): Promise<CreateSessionResponse> {
  console.log('üé¨ [EQUOS] Cr√©ation session...');
  console.log('üé≠ [EQUOS] Agent ID:', agentId);
  console.log('üé® [EQUOS] Avatar ID:', avatarId);
  console.log('üë§ [EQUOS] Student:', studentName);
  if (maxDuration) {
    console.log('‚è±Ô∏è [EQUOS] Max Duration:', maxDuration, 'secondes');
  }

  // Appeler l'Edge Function Supabase (s√©curis√©e)
  const { data, error } = await supabase.functions.invoke('create-equos-session', {
    body: {
      agentId,
      avatarId,
      studentName,
      consumerIdentity,
      maxDuration
    }
  });

  if (error) {
    console.error('‚ùå [EQUOS] Erreur Edge Function:', error);
    console.error('‚ùå [EQUOS] D√©tails:', JSON.stringify(error, null, 2));
    throw new Error(`Erreur Edge Function: ${error.message}`);
  }

  if (!data) {
    throw new Error('Aucune donn√©e retourn√©e par l\'Edge Function');
  }

  // Si data contient une erreur (Edge Function a retourn√© 200 avec erreur)
  if (data.error) {
    console.error('‚ùå [EQUOS] Erreur API:', data.error);
    console.error('‚ùå [EQUOS] D√©tails:', data.details || data.message);
    throw new Error(`Erreur Equos API: ${data.error} - ${data.details?.message || data.message || 'Erreur inconnue'}`);
  }

  console.log('‚úÖ [EQUOS] Session cr√©√©e:', data.session.id);
  console.log('üîó [EQUOS] LiveKit server:', data.session.host.serverUrl);
  console.log('üéüÔ∏è [EQUOS] Consumer token:', data.consumerAccessToken ? 'Pr√©sent' : 'Manquant');

  return data as CreateSessionResponse;
}

/**
 * Terminer une session Equos
 *
 * NOTE: Actuellement non impl√©ment√© via Edge Function
 * Les sessions se terminent automatiquement quand l'utilisateur quitte
 *
 * @param sessionId - ID de la session √† terminer
 */
export async function endEquosSession(sessionId: string): Promise<void> {
  console.log('‚èπÔ∏è [EQUOS] Fin de session:', sessionId);
  console.log('‚ÑπÔ∏è [EQUOS] La session se termine automatiquement c√¥t√© Equos');

  // TODO: Cr√©er une Edge Function pour terminer les sessions si n√©cessaire
}

/**
 * R√©cup√©rer l'avatar ID par d√©faut depuis .env
 *
 * @returns Avatar ID configur√© (optionnel)
 */
export function getDefaultAvatarId(): string | undefined {
  const avatarId = import.meta.env.VITE_ECOS_DEFAULT_AVATAR_ID;

  if (!avatarId) {
    console.warn('‚ö†Ô∏è [EQUOS] VITE_ECOS_DEFAULT_AVATAR_ID non configur√© - Avatar par d√©faut sera utilis√©');
    return undefined;
  }

  return avatarId;
}
