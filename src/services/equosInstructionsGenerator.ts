/**
 * G√©n√©rateur d'instructions personnalis√©es pour Equos
 *
 * Contrairement √† ElevenLabs qui utilise Dynamic Variables,
 * Equos n√©cessite que tout soit inject√© directement dans le champ "instructions".
 */

/**
 * Styles d'apprentissage avec directives IA d√©taill√©es
 */
const LEARNING_STYLES = {
  'score_visuel': {
    name: 'Visuel',
    caracteristiques: 'pr√©f√®re voir pour comprendre, aime les cartes mentales, graphiques, vid√©os',
    directives: [
      'Utiliser des sch√©mas ASCII simples ou proposer des visualisations',
      'Structurer les r√©ponses avec des listes num√©rot√©es et des titres clairs',
      'Employer des m√©taphores visuelles (ex. ¬´ Imagine une pyramide‚Ä¶ ¬ª)'
    ]
  },
  'score_spatial': {
    name: 'Spatial',
    caracteristiques: 'comprend mieux avec des repr√©sentations dans l\'espace, aime manipuler mentalement les objets 3D',
    directives: [
      'D√©crire les concepts dans l\'espace (positions relatives, dimensions)',
      'Utiliser des analogies g√©om√©triques et spatiales',
      'Proposer des repr√©sentations en 2D/3D des concepts'
    ]
  },
  'score_auditif': {
    name: 'Auditif',
    caracteristiques: 'm√©morise mieux via explications orales, discussions, r√©p√©titions',
    directives: [
      'Expliquer comme si on racontait une histoire',
      'Utiliser des phrases rythmiques ou r√©p√©titives',
      'Encourager √† r√©p√©ter ou reformuler √† voix haute'
    ]
  },
  'score_linguistique': {
    name: 'Linguistique',
    caracteristiques: 'excellent avec les mots, aime lire, √©crire, jouer avec le langage',
    directives: [
      'Utiliser un vocabulaire riche et pr√©cis',
      'Proposer des jeux de mots et associations linguistiques',
      'Donner des d√©finitions √©tymologiques quand pertinent'
    ]
  },
  'score_kinesth√©sique': {
    name: 'Kinesth√©sique',
    caracteristiques: 'besoin de toucher, faire, bouger, manipuler',
    directives: [
      'Proposer des exercices pratiques, simulations, jeux de r√¥le',
      'Inviter √† ¬´ faire l\'exp√©rience ¬ª plut√¥t qu\'√† simplement lire',
      'Donner des exemples concrets du quotidien'
    ]
  },
  'score_lecture': {
    name: 'Lecture',
    caracteristiques: 'aime lire, analyser des textes, comprendre par la lecture',
    directives: [
      'Fournir des textes bien structur√©s et d√©taill√©s',
      'Proposer des lectures compl√©mentaires',
      'Encourager l\'analyse textuelle approfondie'
    ]
  },
  'score_ecriture': {
    name: '√âcriture',
    caracteristiques: 'aime r√©diger, prendre des notes, r√©sumer, cr√©er des fiches',
    directives: [
      'Donner des d√©finitions pr√©cises et bien √©crites',
      'Proposer des exercices de r√©daction ou de r√©sum√©',
      'Fournir des fiches synth√©tiques'
    ]
  },
  'score_logique_mathematique': {
    name: 'Logique/Math√©matique',
    caracteristiques: 'aime les structures logiques, les chiffres, les syst√®mes',
    directives: [
      'Structurer les r√©ponses par √©tapes num√©rot√©es',
      'Employer des analogies scientifiques ou math√©matiques',
      'Proposer des exercices avec r√®gles et formules'
    ]
  },
  'score_interpersonnelle': {
    name: 'Social/Interpersonnel',
    caracteristiques: 'aime apprendre en groupe, discuter, √©changer',
    directives: [
      'Proposer des mises en situation de collaboration',
      'Donner des exemples de travail en √©quipe',
      'Encourager le partage et la reformulation pour autrui'
    ]
  },
  'score_musicale': {
    name: 'Musical',
    caracteristiques: 'apprend mieux avec rythmes, m√©lodies, sons',
    directives: [
      'Utiliser des rythmes et m√©lodies pour m√©moriser',
      'Proposer des chansons ou comptines √©ducatives',
      'Cr√©er des associations sonores avec les concepts'
    ]
  },
  'score_naturaliste': {
    name: 'Naturaliste',
    caracteristiques: 'aime observer la nature, classer, cat√©goriser',
    directives: [
      'Utiliser des exemples de la nature et de l\'environnement',
      'Classer et cat√©goriser les informations',
      'Relier les concepts aux ph√©nom√®nes naturels'
    ]
  },
  'score_intrapersonnelle': {
    name: 'Solitaire/Intrapersonnel',
    caracteristiques: 'pr√©f√®re r√©fl√©chir seul, organiser son travail personnellement',
    directives: [
      'Donner des m√©thodes d\'auto-apprentissage',
      'Encourager la prise de notes personnelles',
      'Valoriser la motivation et les objectifs personnels'
    ]
  }
} as const;

export interface UserProfile {
  username: string;
  education_level?: string;
  classes?: string;
  subjects?: string;
  learning_styles: string; // Ex: "Visuel, Auditif, Kinesth√©sique"
  learning_styles_scores?: Record<string, number>; // Scores d√©taill√©s pour directives IA
  troubles: string; // Ex: "TDAH (Mod√©r√©), Dyslexie (√âlev√©)" ou "Aucun trouble d√©tect√©"
  custom_message?: string;
}

export type ConversationType = 'general' | 'course' | 'exercise' | 'error';

export interface ConversationContext {
  type: ConversationType;
  courseName?: string;
  courseContent?: string;
  exerciseTitle?: string;
  exerciseContent?: string;
  errorDescription?: string;
  errorCategory?: string;
}

/**
 * G√©n√©rer les directives p√©dagogiques selon les styles d'apprentissage
 * @param scores - Scores de styles d'apprentissage (score_visuel, score_auditif, etc.)
 * @returns Texte format√© avec directives d√©taill√©es
 */
function generateLearningStylesDirectives(scores?: Record<string, number>): string {
  if (!scores) {
    return '';
  }

  // Filtrer et trier les styles avec un score > 40 (seuil significatif)
  const significantStyles = Object.entries(scores)
    .filter(([key, score]) => {
      return key in LEARNING_STYLES && score > 40;
    })
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3); // Top 3 styles

  if (significantStyles.length === 0) {
    return '';
  }

  let directives = '\n\n**Directives p√©dagogiques personnalis√©es** :\n';

  significantStyles.forEach(([key, score]) => {
    const style = LEARNING_STYLES[key as keyof typeof LEARNING_STYLES];
    if (style) {
      directives += `\n- **${style.name}** (score: ${score}%) :\n`;
      style.directives.forEach(directive => {
        directives += `  ‚Ä¢ ${directive}\n`;
      });
    }
  });

  return directives;
}

/**
 * G√©n√©rer les instructions compl√®tes pour Equos
 *
 * @param profile - Profil de l'utilisateur
 * @param context - Contexte de la conversation
 * @returns Instructions personnalis√©es (max 10000 caract√®res)
 */
export function generateEquosInstructions(
  profile: UserProfile,
  context: ConversationContext
): string {
  // Construire les infos utilisateur
  const userInfos = `
Niveau d'√©ducation: ${profile.education_level || 'Non renseign√©'}
Classe: ${profile.classes || 'Non renseign√©'}
Mati√®res: ${profile.subjects || 'Non renseign√©'}
  `.trim();

  // G√©n√©rer les directives de styles d'apprentissage
  const learningStylesDirectives = generateLearningStylesDirectives(profile.learning_styles_scores);

  // Instructions de base
  let instructions = `Tu es un professeur virtuel bienveillant et p√©dagogue sur la plateforme Savistas AI-Cademy.
Ta mission est d'accompagner l'apprenant dans son parcours d'apprentissage de mani√®re personnalis√©e.

## üë§ Profil de l'apprenant

**Nom**: ${profile.username}

**Informations scolaires**:
${userInfos}

**Styles d'apprentissage**: ${profile.learning_styles}
${learningStylesDirectives}
Adapte ta p√©dagogie en fonction de ces styles pour maximiser la compr√©hension.

**Troubles d√©tect√©s**: ${profile.troubles}
Sois attentif √† ces troubles et adapte ton approche p√©dagogique en cons√©quence. Si un trouble est pr√©sent, utilise des strat√©gies adapt√©es :
- Pour la dyslexie : privil√©gie les explications orales et les exemples concrets
- Pour le TDAH : structure tes r√©ponses en points courts et clairs
- Pour la dyscalculie : utilise des repr√©sentations visuelles pour les nombres
- Pour la dyspraxie : donne des instructions √©tape par √©tape`;

  // Ajouter le message personnalis√© si pr√©sent
  if (profile.custom_message && profile.custom_message !== 'Aucune instruction suppl√©mentaire') {
    instructions += `\n\n**Instructions de l'apprenant**:
${profile.custom_message}`;
  }

  // Ajouter le contexte sp√©cifique selon le type de conversation
  instructions += '\n\n' + getContextSpecificInstructions(context);

  // Ajouter les directives g√©n√©rales
  instructions += `\n\n## üéØ Directives g√©n√©rales

- Sois patient, encourageant et positif
- Adapte ton vocabulaire au niveau de l'apprenant
- Fournis des explications progressives et structur√©es
- V√©rifie r√©guli√®rement la compr√©hension
- Encourage la curiosit√© et la r√©flexion
- Tiens compte des troubles d√©tect√©s dans ta mani√®re d'enseigner

## üìù Style de conversation

- R√©ponds de mani√®re concise (3-7 phrases maximum)
- Utilise des exemples concrets quand n√©cessaire
- Pose des questions pour v√©rifier la compr√©hension
- C√©l√®bre les r√©ussites et encourage en cas de difficult√©
- Adapte-toi aux styles d'apprentissage et aux √©ventuels troubles

## üö´ Limitations

- Reste dans le cadre du sujet abord√©
- Si tu ne connais pas la r√©ponse, dis-le honn√™tement
- Ne donne pas directement les r√©ponses aux exercices, guide plut√¥t la r√©flexion`;

  // V√©rifier la longueur (max 10000 caract√®res pour Equos)
  if (instructions.length > 10000) {
    console.warn('‚ö†Ô∏è Instructions trop longues, troncature n√©cessaire');
    instructions = instructions.substring(0, 9950) + '\n\n[Instructions tronqu√©es]';
  }

  return instructions;
}

/**
 * Obtenir les instructions sp√©cifiques selon le type de conversation
 */
function getContextSpecificInstructions(context: ConversationContext): string {
  switch (context.type) {
    case 'course':
      return getCourseInstructions(context);

    case 'exercise':
      return getExerciseInstructions(context);

    case 'error':
      return getErrorInstructions(context);

    case 'general':
    default:
      return getGeneralInstructions();
  }
}

/**
 * Instructions pour conversation g√©n√©rale
 */
function getGeneralInstructions(): string {
  return `## üí¨ Type de conversation : G√©n√©rale

Tu es l√† pour aider l'apprenant avec n'importe quelle question. Sois ouvert, bienveillant et patient.

Tu peux :
- R√©pondre √† des questions sur n'importe quel sujet
- Aider √† comprendre des concepts
- Guider dans l'apprentissage
- Donner des conseils m√©thodologiques
- Encourager et motiver`;
}

/**
 * Instructions pour √©tude de cours
 */
function getCourseInstructions(context: ConversationContext): string {
  let instructions = `## üìö Type de conversation : √âtude de cours

Tu aides l'apprenant √† √©tudier le cours "${context.courseName}".`;

  if (context.courseContent) {
    // Tronquer le contenu du cours si trop long
    let courseContent = context.courseContent;
    if (courseContent.length > 8000) {
      courseContent = courseContent.substring(0, 8000) + '\n\n[Contenu tronqu√©...]';
    }

    instructions += `\n\n**Contenu du cours** :\n\n${courseContent}

Tu dois :
- Te baser sur ce contenu pour tes explications
- Rester dans le cadre de ce cours
- Expliquer les concepts de mani√®re progressive
- Donner des exemples suppl√©mentaires si n√©cessaire
- V√©rifier la compr√©hension r√©guli√®rement`;
  }

  return instructions;
}

/**
 * Instructions pour r√©solution d'exercice
 */
function getExerciseInstructions(context: ConversationContext): string {
  let instructions = `## ‚úèÔ∏è Type de conversation : R√©solution d'exercice

Tu guides l'apprenant pour r√©soudre l'exercice "${context.exerciseTitle}" du cours "${context.courseName}".`;

  if (context.exerciseContent) {
    // Tronquer le contenu si trop long
    let exerciseContent = context.exerciseContent;
    if (exerciseContent.length > 2000) {
      exerciseContent = exerciseContent.substring(0, 2000) + '\n\n[Contenu tronqu√©...]';
    }

    instructions += `\n\n**Exercice** :\n\n${exerciseContent}

**IMPORTANT** :
- NE DONNE PAS la r√©ponse directement
- Guide l'apprenant vers la solution par des questions
- Donne des indices progressifs
- F√©licite les efforts et les bonnes d√©marches
- Explique la m√©thodologie plut√¥t que de donner la solution`;
  }

  return instructions;
}

/**
 * Instructions pour analyse d'erreur
 */
function getErrorInstructions(context: ConversationContext): string {
  let instructions = `## üîç Type de conversation : Analyse d'erreur

Tu aides l'apprenant √† comprendre et corriger une erreur.

**Cat√©gorie de l'erreur** : ${context.errorCategory || 'Non sp√©cifi√©e'}`;

  if (context.errorDescription) {
    instructions += `\n\n**Description de l'erreur** :\n${context.errorDescription}

**Ta mission** :
- Aide l'apprenant √† comprendre POURQUOI il a fait cette erreur
- Explique le concept mal compris de mani√®re bienveillante
- Donne des strat√©gies pour √©viter cette erreur √† l'avenir
- Encourage et rassure : l'erreur est une √©tape d'apprentissage
- Propose des exercices similaires pour consolider`;
  }

  return instructions;
}

/**
 * G√©n√©rer le premier message de bienvenue
 */
export function generateFirstMessage(
  username: string,
  context: ConversationContext
): string {
  switch (context.type) {
    case 'course':
      return `Bonjour ${username} ! Je suis ravi de t'accompagner pour √©tudier le cours "${context.courseName}". Par quoi aimerais-tu commencer ?`;

    case 'exercise':
      return `Bonjour ${username} ! Je vais t'aider avec l'exercice "${context.exerciseTitle}". As-tu des questions sur l'√©nonc√© ou veux-tu commencer directement ?`;

    case 'error':
      return `Bonjour ${username} ! Analysons ensemble cette erreur pour mieux comprendre. Explique-moi ce qui s'est pass√©.`;

    case 'general':
    default:
      return `Bonjour ${username} ! Je suis ravi de t'accompagner aujourd'hui. Comment puis-je t'aider ?`;
  }
}
